{"version":3,"sources":["images/avatar.jpg","components/MediaCard.js","components/MediaList.js","serviceWorker.js","index.js"],"names":["module","exports","MediaCard","name","avatar","date","description","likes","heart","className","src","alt","href","title","defaultProps","MediaList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,oC,mMCGrCC,G,KAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAKC,EAAP,EAAOA,OAAOC,EAAd,EAAcA,KAAKC,EAAnB,EAAmBA,YAAYC,EAA/B,EAA+BA,MAAMC,EAArC,EAAqCA,MAArC,OAChB,yBAAKC,UAAY,QACb,4BAAQA,UAAU,eAChB,yBAAKA,UAAU,SAASC,IAAKN,EAAQO,IAAI,kBACzC,yBAAKF,UAAU,oBACX,wBAAIA,UAAU,aAAaN,GAC3B,0BAAMM,UAAU,aAAaJ,KAGnC,yBAAKI,UAAU,aACZH,GAEH,4BAAQG,UAAU,eAChB,uBAAGA,UAAU,YAAYG,KAAK,GAAGC,MAAM,eAAvC,kBACA,uBAAGJ,UAAU,cAAcG,KAAK,GAAGC,MAAM,IACvC,0BAAMJ,UAAU,kBAAkBF,GAClC,0BAAME,UAAWD,GAAjB,eAMVN,EAAUY,aAAe,CACvBN,MAAQ,cACRD,MAAQ,GAGKL,Q,gBCcAa,E,iLArCT,OACE,0BAAMN,UAAU,iBACZ,kDACA,wBAAIA,UAAU,qBACV,4BAAI,kBAAC,EAAD,CACIN,KAAO,gBACPE,KAAO,4BACPC,YAAc,0RACdC,MAAS,GACTC,MAAQ,aACRJ,OAAUA,OAGlB,4BAAI,kBAAC,EAAD,CACID,KAAO,gBACPE,KAAO,+BACPC,YAAc,0RACdC,MAAS,EACTC,MAAQ,cACRJ,OAAUA,OAGlB,4BAAI,kBAAC,EAAD,CACID,KAAO,sBACPE,KAAO,2BACPC,YAAc,qRACdC,MAAS,EACTC,MAAQ,aACRJ,OAAUA,a,GA9BVY,IAAMC,WCOVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SDmHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e323568b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.1a0d86a7.jpg\";","import React from \"react\";\nimport \"../MediaCard.scss\";\n\nconst MediaCard = ({name,avatar,date,description,likes,heart}) => (\n  <div className = \"card\">\n      <header className=\"card-header\">\n        <img className=\"avatar\" src={avatar} alt=\"Alex Guerrero\"/>\n        <div className=\"card-header-text\">\n            <h2 className=\"user-name\">{name}</h2>\n            <span className=\"user-date\">{date}</span>\n        </div>\n      </header>\n      <div className=\"card-body\">\n        {description}\n      </div>\n      <footer className=\"card-footer\">\n        <a className=\"read-more\" href=\"\" title=\"Leer más\">Leer más...</a>\n        <a className=\"likes-group\" href=\"\" title=\"\">\n          <span className=\"likes-quantity\">{likes}</span>\n          <span className={heart}>&hearts;</span>\n        </a>\n      </footer>\n  </div>\n);\n\nMediaCard.defaultProps = {\n  heart : \"heart-empty\",\n  likes : 0\n}\n\nexport default MediaCard;","import React from \"react\";\nimport \"../MediaCard.scss\";\nimport MediaCard from \"./MediaCard\";\nimport avatar from \"../images/avatar.jpg\"\n\nclass MediaList extends React.Component {\n    render() {\n      return (\n        <main className=\"section-cards\">\n            <h1>My Media Cards APP</h1>\n            <ul className=\"section-card-list\">\n                <li><MediaCard \n                        name = \"Alex Guerrero\"\n                        date = \"Lunes 14 de Abril de 2019\"\n                        description = \"Esta es la vida de Alex Guerrero. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\n                        likes = {27}\n                        heart = \"heart-full\"\n                        avatar = {avatar}\n                    />\n                </li>\n                <li><MediaCard \n                        name = \"Paco Pérez\"\n                        date = \"Martes 10 de Febrero de 2019\"\n                        description = \"Esta es la vida de Paco Pérez. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\n                        likes = {0}\n                        heart = \"heart-empty\"\n                        avatar = {avatar}\n                    />\n                </li>\n                <li><MediaCard \n                        name = \"Carolina Sánchez\"\n                        date = \"Lunes 2 de Julio de 2019\"\n                        description = \"Esta es la vida de Carolina. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\n                        likes = {3}\n                        heart = \"heart-full\"\n                        avatar = {avatar}\n                    />\n                </li>\n            </ul>\n        </main>\n      );\n    }\n  }\n\nexport default MediaList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MediaList from './components/MediaList';\nimport avatar from \"./images/avatar.jpg\"\nimport * as serviceWorker from './serviceWorker';\n\nconst userName = \"Alex Guerrero\";\nconst userDate = \"Lunes 20 de Octubre de 2019\";\nconst cardDescription = \"You think water moves fast? You should see ice. It moves like it has a mind. Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out. Now, I don't know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I'm breaking now. We said we'd say it was the snow that killed the other two, but it wasn't. Nature is lethal but it doesn't hold a candle to man.\"\nconst likesNumber = 37;\nconst isFull = \"heart-full\";\n\n\nReactDOM.render(<MediaList/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}